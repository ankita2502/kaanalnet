// Generated by CoffeeScript 1.9.3
(function() {
  var LXCControl, exec, fs, util;

  util = require('util');

  exec = require('child_process').exec;

  fs = require('fs');

  LXCControl = (function() {
    function LXCControl() {}

    LXCControl.prototype.execute = function(command, callback) {
      if (command == null) {
        callback(false);
      }
      util.log("executing " + command + "...");
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          if (error) {
            return callback(false);
          } else {
            return callback(true);
          }
        };
      })(this));
    };

    LXCControl.prototype.createContainer = function(containerName, ref, callback) {
      var command;
      command = "lxc-clone -o " + ref + " -n " + containerName;
      util.log("createContainer command : " + command);
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    LXCControl.prototype.startContainer = function(contaninerName, callback) {
      var command;
      command = "lxc-start --name " + contaninerName + " -d ";
      util.log("startContainer command : " + command);
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    LXCControl.prototype.stopContainer = function(containerName, callback) {
      var command;
      command = "lxc-stop --name " + containerName + " ";
      util.log("stopContainer command : " + command);
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    LXCControl.prototype.destroyContainer = function(containerName, callback) {
      var command;
      command = "lxc-destroy --name " + containerName + " ";
      util.log("destroyContainer command : " + command);
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    LXCControl.prototype.addEthernetInterface = function(containerName, vethname, hwAddress) {
      var filename, text;
      util.log(" addEthernetInterface " + containerName + "  vethname " + vethname + "  hwAddress " + hwAddress + " ");
      filename = "/var/lib/lxc/" + containerName + "/config";
      util.log(" filname " + filename);
      text = "\nlxc.network.type = veth \nlxc.network.hwaddr= " + hwAddress + " \nlxc.network.veth.pair = " + vethname + " \nlxc.network.flags = up";
      fs.appendFileSync(filename, text);
      return true;
    };

    LXCControl.prototype.assignIP = function(containerName, ifname, ipaddress, netmask, gateway) {
      var filename, text;
      filename = "/var/lib/lxc/" + containerName + "/rootfs/etc/network/interfaces";
      if (gateway != null) {
        text = "\nauto " + ifname + "\niface " + ifname + " inet static \n\t address " + ipaddress + " \n\t netmask " + netmask + " \n\t gateway " + gateway + "\n";
      }
      if (gateway == null) {
        text = "\nauto " + ifname + "\niface " + ifname + " inet static \n\t address " + ipaddress + " \n\t netmask " + netmask + " \n";
      }
      fs.appendFileSync(filename, text);
      return true;
    };

    LXCControl.prototype.getStatus = function(containerName, callback) {
      var command;
      command = "lxc-ls --running " + containerName + " ";
      util.log("executing " + command + "...");
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          if (error != null) {
            util.log("lxcdriver: execute - Error : " + error);
          }
          if (stderr != null) {
            util.log("lxcdriver: execute - stderr : " + stderr);
          }
          if (error || (stdout == null)) {
            return callback("notrunning");
          } else {
            return callback("running");
          }
        };
      })(this));
    };

    LXCControl.prototype.clearInterface = function(containerName) {
      var filename;
      filename = "/var/lib/lxc/" + containerName + "/rootfs/etc/network/interfaces";
      return fs.unlinkSync(filename);
    };

    LXCControl.prototype.checkContainerExistence = function(containerName, callback) {
      var command;
      command = "lxc-info -n " + containerName + " ";
      util.log("executing " + command + "...");
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          if (error || (stdout == null)) {
            return callback("notavailable");
          } else {
            return callback("available");
          }
        };
      })(this));
    };

    LXCControl.prototype.updateHostStartupScript = function(containerName) {
      var agentcmd, filename, iperf1, iperf2;
      filename = "/var/lib/lxc/" + containerName + "/rootfs/etc/init.d/rc.local";
      agentcmd = "\nnodejs /node_modules/testagent/lib/app.js > /var/log/testagent.log & \n";
      iperf1 = "iperf -s > /var/log/iperf_tcp_server.log & \n";
      iperf2 = "iperf -s -u > /var/log/iperf_udp_server.log & \n";
      fs.appendFileSync(filename, agentcmd);
      fs.appendFileSync(filename, iperf1);
      return fs.appendFileSync(filename, iperf2);
    };

    LXCControl.prototype.updateRouterConfig = function(ifmap, containerName) {
      var i, j, k, len, len1, ospfconf, ospffile, zebraconf, zebrafile;
      zebrafile = "/var/lib/lxc/" + containerName + "/rootfs/etc/zebra.conf";
      ospffile = "/var/lib/lxc/" + containerName + "/rootfs/etc/ospf.conf";
      zebraconf = "hostname zebra \npassword zebra \nenable password zebra \n";
      for (j = 0, len = ifmap.length; j < len; j++) {
        i = ifmap[j];
        zebraconf += "interface  " + i.ifname + " \n";
        if (i.type === "wan") {
          zebraconf += "   ip address " + i.ipaddress + "/30 \n";
        }
        if (i.type === "lan") {
          zebraconf += "   ip address " + i.ipaddress + "/27 \n";
        }
        if (i.type === "mgmt") {
          zebraconf += "   ip address " + i.ipaddress + "/24 \n";
        }
      }
      util.log("zebrafile " + zebraconf);
      fs.appendFileSync(zebrafile, zebraconf);
      ospfconf = "hostname ospf \npassword zebra \nenable password zebra \nrouter ospf\n  ";
      for (k = 0, len1 = ifmap.length; k < len1; k++) {
        i = ifmap[k];
        if (i.type !== "mgmt") {
          ospfconf += "   network " + i.ipaddress + "/24 area 0 \n";
        }
      }
      util.log("ospfd fils", ospfconf);
      return fs.appendFileSync(ospffile, ospfconf);
    };

    LXCControl.prototype.updateRouterStartupScript = function(containerName) {
      var filename, ospfcmd, zebracmd;
      util.log("in updateRouterStartupScript ");
      filename = "/var/lib/lxc/" + containerName + "/rootfs/etc/init.d/rc.local";
      zebracmd = "\n/usr/lib/quagga/zebra -f /etc/zebra.conf -d & \n";
      ospfcmd = "/usr/lib/quagga/ospfd -f /etc/ospf.conf -d & \n";
      util.log("zebracmd " + zebracmd);
      util.log("ospfdcmd " + ospfcmd);
      fs.appendFileSync(filename, zebracmd);
      fs.appendFileSync(filename, ospfcmd);
    };

    return LXCControl;

  })();

  module.exports = new LXCControl;

}).call(this);
