// Generated by CoffeeScript 1.9.3
(function() {
  var LXCControl, exec, fs, util;

  util = require('util');

  exec = require('child_process').exec;

  fs = require('fs');

  LXCControl = (function() {
    function LXCControl() {}

    LXCControl.prototype.execute = function(command, callback) {
      if (command == null) {
        callback(false);
      }
      util.log("executing " + command + "...");
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          util.log("lxcdriver: execute - Error : " + error);
          util.log("lxcdriver: execute - stdout : " + stdout);
          util.log("lxcdriver: execute - stderr : " + stderr);
          if (error) {
            return callback(false);
          } else {
            return callback(true);
          }
        };
      })(this));
    };

    LXCControl.prototype.createContainer = function(containerName, ref, callback) {
      var command;
      command = "lxc-clone -o " + ref + " -n " + containerName;
      util.log("createContainer command : " + command);
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    LXCControl.prototype.startContainer = function(contaninerName, callback) {
      var command;
      command = "lxc-start --name " + contaninerName + " -d ";
      util.log("startContainer command : " + command);
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    LXCControl.prototype.stopContainer = function(containerName, callback) {
      var command;
      command = "lxc-stop --name " + containerName + " ";
      util.log("stopContainer command : " + command);
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    LXCControl.prototype.destroyContainer = function(containerName, callback) {
      var command;
      command = "lxc-destroy --name " + containerName + " ";
      util.log("destroyContainer command : " + command);
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    LXCControl.prototype.addEthernetInterface = function(containerName, vethname, hwAddress) {
      var filename, text;
      util.log(" addEthernetInterface " + containerName + "  vethname " + vethname + "  hwAddress " + hwAddress + " ");
      filename = "/var/lib/lxc/" + containerName + "/config";
      util.log(" filname " + filename);
      text = "\nlxc.network.type = veth \nlxc.network.hwaddr= " + hwAddress + " \nlxc.network.veth.pair = " + vethname + " \nlxc.network.flags = up";
      fs.appendFileSync(filename, text);
      return true;
    };

    LXCControl.prototype.assignIP = function(containerName, ifname, ipaddress, netmask, gateway) {
      var filename, text;
      filename = "/var/lib/lxc/" + containerName + "/rootfs/etc/network/interfaces";
      if (gateway != null) {
        text = "\nauto " + ifname + "\niface " + ifname + " inet static \n\t address " + ipaddress + " \n\t netmask " + netmask + " \n\t gateway " + gateway + "\n";
      }
      if (gateway == null) {
        text = "\nauto " + ifname + "\niface " + ifname + " inet static \n\t address " + ipaddress + " \n\t netmask " + netmask + " \n";
      }
      fs.appendFileSync(filename, text);
      return true;
    };

    LXCControl.prototype.getStatus = function(containerName, callback) {
      var command;
      command = "lxc-ls --running " + containerName + " ";
      util.log("executing " + command + "...");
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          util.log("lxcdriver: execute - Error : " + error);
          util.log("lxcdriver: execute - stdout : " + stdout);
          util.log("lxcdriver: execute - stderr : " + stderr);
          if (error || (stdout == null)) {
            return callback("notrunning");
          } else {
            return callback("running");
          }
        };
      })(this));
    };

    LXCControl.prototype.clearInterface = function(containerName) {
      var filename;
      filename = "/var/lib/lxc/" + containerName + "/rootfs/etc/network/interfaces";
      return fs.unlinkSync(filename);
    };

    LXCControl.prototype.checkContainerExistence = function(containerName, callback) {
      var command;
      command = "lxc-info -n " + containerName + " ";
      util.log("executing " + command + "...");
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          util.log("lxcdriver: execute - Error : " + error);
          util.log("lxcdriver: execute - stdout : " + stdout);
          util.log("lxcdriver: execute - stderr : " + stderr);
          if (error || (stdout == null)) {
            return callback("notavailable");
          } else {
            return callback("available");
          }
        };
      })(this));
    };

    return LXCControl;

  })();

  module.exports = new LXCControl;

}).call(this);
