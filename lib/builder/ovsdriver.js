// Generated by CoffeeScript 1.9.3
(function() {
  var BridgeControl, exec, util;

  util = require('util');

  exec = require('child_process').exec;

  BridgeControl = (function() {
    function BridgeControl() {}

    BridgeControl.prototype.execute = function(command, callback) {
      if (command == null) {
        callback(false);
      }
      util.log("executing " + command + "...");
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          util.log("ovsdriver: execute - Error : " + error);
          util.log("ovsdriver: execute - stdout : " + stdout);
          util.log("ovsdriver: execute - stderr : " + stderr);
          if (error) {
            return callback(false);
          } else {
            return callback(true);
          }
        };
      })(this));
    };

    BridgeControl.prototype.createBridge = function(bridgname, callback) {
      var command;
      command = "ovs-vsctl add-br " + bridgname;
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    BridgeControl.prototype.addInterface = function(bridgname, ifname, callback) {
      var command;
      command = "ovs-vsctl add-port " + bridgname + " " + ifname;
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    BridgeControl.prototype.enableBridge = function(bridgname, callback) {
      var command;
      command = "ifconfig " + bridgname + " up";
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    BridgeControl.prototype.disableBridge = function(bridgname, callback) {
      var command;
      command = "ifconfig " + bridgname + " down";
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    BridgeControl.prototype.setController = function(bridgename, controllerip, callback) {
      var command;
      command = "ovs-vsctl set-controller " + bridgename + " " + controllerip;
      return this.execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    BridgeControl.prototype.deleteBridge = function(bridgename, callback) {
      return this.disableBridge(bridgename, (function(_this) {
        return function(result) {
          var command;
          command = "ovs-vsctl del-br " + bridgename;
          return _this.execute(command, function(result) {
            return callback(result);
          });
        };
      })(this));
    };

    BridgeControl.prototype.getStatus = function(bridgename, callback) {
      var command;
      command = "ovs-vsctl show " + bridgename;
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          util.log("ovsdriver: execute - Error : " + error);
          util.log("ovsdriver: execute - stdout : " + stdout);
          util.log("ovsdriver: execute - stderr : " + stderr);
          if ((stdout != null) || error) {
            return callback("notrunning");
          } else {
            return callback("running");
          }
        };
      })(this));
    };

    return BridgeControl;

  })();

  module.exports = new BridgeControl;

}).call(this);
