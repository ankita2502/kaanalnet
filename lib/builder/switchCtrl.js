// Generated by CoffeeScript 1.9.3
(function() {
  var StormData, StormRegistry, SwitchBuilder, SwitchData, SwitchRegistry, brctl, netem, ovs, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  brctl = require('brctldriver');

  ovs = require('ovsdriver');

  util = require('util');

  netem = require('./iproute2driver');

  StormData = require('stormdata');

  StormRegistry = require('stormregistry');

  SwitchRegistry = (function(superClass) {
    extend(SwitchRegistry, superClass);

    function SwitchRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new SwitchData(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(entry);
        }
      });
      this.on('removed', function(entry) {
        if (entry.destructor != null) {
          return entry.destructor();
        }
      });
      SwitchRegistry.__super__.constructor.call(this, filename);
    }

    SwitchRegistry.prototype.add = function(data) {
      var entry;
      if (!(data instanceof SwitchData)) {
        return;
      }
      return entry = SwitchRegistry.__super__.add.call(this, data.id, data);
    };

    SwitchRegistry.prototype.update = function(data) {
      return SwitchRegistry.__super__.update.call(this, data.id, data);
    };

    SwitchRegistry.prototype.get = function(key) {
      var entry;
      entry = SwitchRegistry.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof SwitchData) {
        entry.data.id = entry.id;
        return entry.StormData;
      } else {
        return entry;
      }
    };

    return SwitchRegistry;

  })(StormRegistry);

  SwitchData = (function(superClass) {
    var Schema;

    extend(SwitchData, superClass);

    Schema = {
      name: "switch",
      type: "object",
      properties: {
        name: {
          type: "string",
          required: true
        },
        type: {
          type: "string",
          required: true
        },
        make: {
          type: "string",
          required: false
        },
        controller: {
          type: "string",
          required: false
        }
      }
    };

    function SwitchData(id, data) {
      SwitchData.__super__.constructor.call(this, id, data, Schema);
    }

    return SwitchData;

  })(StormData);

  SwitchBuilder = (function() {
    var bridge;

    SwitchBuilder.records = [];

    bridge = null;

    function SwitchBuilder() {
      this.registry = new SwitchRegistry;
      this.registry.on('load', function(key, val) {});
    }

    SwitchBuilder.prototype.list = function(callback) {
      return callback(this.registry.list());
    };

    SwitchBuilder.prototype.get = function(data, callback) {
      return callback(this.registry.get(data));
    };

    SwitchBuilder.prototype.create = function(data, callback) {
      var err, sdata;
      try {
        return sdata = new SwitchData(null, data);
      } catch (_error) {
        err = _error;
        util.log("invalid schema" + err);
        return callback(new Error("invalid schema"));
      } finally {
        if (data.make === "openvswitch") {
          bridge = ovs;
        } else {
          bridge = brctl;
        }
        bridge.createBridge(data.name, (function(_this) {
          return function(result) {
            var ref;
            util.log("Bridge creation " + result);
            if (result === false) {
              sdata.data.status = "failed";
              sdata.data.reason = "failed to create";
            } else {
              sdata.data.status = "created";
            }
            _this.registry.add(sdata);
            return callback({
              "id": sdata.id,
              "status": sdata.data.status,
              "reason": (sdata != null ? (ref = sdata.data) != null ? ref.reason : void 0 : void 0) != null ? sdata.data.reason : void 0
            });
          };
        })(this));
      }
    };

    SwitchBuilder.prototype.addInterface = function(data, body, callback) {
      var sdata;
      util.log("addInterface body is " + JSON.stringify(body));
      sdata = this.registry.get(data);
      if (sdata == null) {
        return callback(new Error("Switch details not found in DB"));
      }
      if (sdata.data.make === "openvswitch") {
        bridge = ovs;
      } else {
        bridge = brctl;
      }
      return bridge.addInterface(sdata.data.name, body.ifname, (function(_this) {
        return function(result) {
          var ref;
          util.log("addif" + result);
          return callback({
            "id": sdata.id,
            "status": sdata.data.status,
            "reason": ((ref = sdata.data) != null ? ref.reason : void 0) != null ? sdata.data.reason : void 0
          });
        };
      })(this));
    };

    SwitchBuilder.prototype.CreateTapInterfaces = function(ifname1, ifname2) {
      bridge = brctl;
      return bridge.createTapPeers(ifname1, ifname2, (function(_this) {
        return function(result) {
          util.log("createTapPeers " + result);
          return result;
        };
      })(this));
    };

    SwitchBuilder.prototype.start = function(data, callback) {
      var sdata;
      sdata = this.registry.get(data);
      if (sdata == null) {
        return callback(new Error("Switch details not found in DB"));
      }
      if (sdata.data.make === "openvswitch") {
        bridge = ovs;
        if (sdata.data.controller != null) {
          bridge.setController(sdata.data.name, sdata.data.controller, (function(_this) {
            return function(result) {
              return util.log(result);
            };
          })(this));
        }
      } else {
        bridge = brctl;
      }
      return bridge.enableBridge(sdata.data.name, (function(_this) {
        return function(result) {
          var ref;
          util.log("enableBridge" + result);
          if (result === false) {
            sdata.data.status = "failed";
            sdata.data.reason = "failed to start";
          } else {
            sdata.data.status = "started";
          }
          _this.registry.update(sdata.id, sdata);
          return callback({
            "id": sdata.id,
            "status": sdata.data.status,
            "reason": ((ref = sdata.data) != null ? ref.reason : void 0) != null ? sdata.data.reason : void 0
          });
        };
      })(this));
    };

    SwitchBuilder.prototype.stop = function(data, callback) {
      var sdata;
      sdata = this.registry.get(data);
      if (sdata == null) {
        return callback(new Error("Switch details not found in DB"));
      }
      if (sdata.data.make === "openvswitch") {
        bridge = ovs;
      } else {
        bridge = brctl;
      }
      return bridge.disableBridge(sdata.data.name, (function(_this) {
        return function(result) {
          var ref;
          util.log("disableBridge" + result);
          if (result === false) {
            sdata.data.status = "failed";
            sdata.data.reason = "failed to stop";
          } else {
            sdata.data.status = "stopped";
          }
          _this.registry.update(sdata.id, sdata);
          return callback({
            "id": sdata.id,
            "status": sdata.data.status,
            "reason": ((ref = sdata.data) != null ? ref.reason : void 0) != null ? sdata.data.reason : void 0
          });
        };
      })(this));
    };

    SwitchBuilder.prototype.del = function(data, callback) {
      var sdata;
      sdata = this.registry.get(data);
      if (sdata.data.make === "openvswitch") {
        bridge = ovs;
      } else {
        bridge = brctl;
      }
      if (sdata == null) {
        return callback(new Error("Switch details not found in DB"));
      }
      return bridge.deleteBridge(sdata.data.name, (function(_this) {
        return function(result) {
          util.log("deletBridge" + result);
          if (result === false) {
            return callback(new Error("Failed to Delete the Switch"));
          }
          _this.registry.remove(sdata.id);
          return callback({
            "id": sdata.id,
            "status": "deleted"
          });
        };
      })(this));
    };

    SwitchBuilder.prototype.dellink = function(ifname, callback) {
      return netem.delLink(ifname, function(result) {
        return callback(result);
      });
    };

    SwitchBuilder.prototype.status = function(data, callback) {
      var sdata;
      sdata = this.registry.get(data);
      if (sdata == null) {
        return callback(new Error("Switch details not found in DB"));
      }
      if (sdata.data.make === "openvswitch") {
        bridge = ovs;
      } else {
        bridge = brctl;
      }
      return bridge.getStatus(sdata.data.name, (function(_this) {
        return function(result) {
          util.log("SwitchCtrl getStatus" + result);
          sdata.data.status = result;
          _this.registry.update(sdata);
          return callback(sdata);
        };
      })(this));
    };

    SwitchBuilder.prototype.setLinkChars = function(data, chars, callback) {
      var sdata;
      sdata = this.registry.get(data);
      if (sdata.data.make === "openvswitch") {
        bridge = ovs;
      } else {
        bridge = brctl;
      }
      if (sdata == null) {
        return callback(new Error("Switch details not found in DB"));
      }
      if (chars.config == null) {
        return callback(true);
      }
      return netem.setLinkChars(chars.name, chars.config, (function(_this) {
        return function(result) {
          console.log("SwitchCtrl - setLinkCahrs output " + result);
          return callback(true);
        };
      })(this));
    };

    return SwitchBuilder;

  })();

  module.exports = new SwitchBuilder;

}).call(this);
