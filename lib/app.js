// Generated by CoffeeScript 1.9.3
(function() {
  var argv, config, fs, log, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, restify, server, systemcheck, topology, topologyDelete, topologyGet, topologyList, topologyPost, util;

  restify = require('restify');

  util = require('util');

  fs = require('fs');

  argv = require('minimist')(process.argv.slice(2));

  if (argv.h != null) {
    console.log("-h view this help\n-l logfile (ex: /var/log/vnetlabs.log)\n-z log level: trace, debug, info, warn, error\n-C sdn controller ip (eg \" loalhost:6633)\n-S switch type ('openvswitch' or 'linuxbridge')\n-V virtualization type ('lxc' or 'docker')\n-W wan subnet \n-L Lan subnet\n-M Mgmt subnet\n-I Lxc image name (eg: \"node\")  ");
    return;
  }

  config = {
    logfile: (ref = argv.l) != null ? ref : "/var/log/vnetlabs.log",
    loglevel: (ref1 = argv.z) === 'trace' || ref1 === 'debug' || ref1 === 'info' || ref1 === 'warn' || ref1 === 'error' ? argv.z : 'info',
    controller: (ref2 = argv.C) != null ? ref2 : null,
    switchtype: (ref3 = argv.S) === 'openvswitch' || ref3 === 'linuxbridge' ? argv.S : 'linuxbridge',
    virtualization: (ref4 = argv.V) === 'lxc' || ref4 === 'docker' ? argv.V : 'lxc',
    wansubnet: (ref5 = argv.W) != null ? ref5 : '172.27.1.0',
    lansubnet: (ref6 = argv.L) != null ? ref6 : '10.10.10.0',
    mgmtsubnet: (ref7 = argv.M) != null ? ref7 : '10.0.3.0',
    lxcimage: (ref8 = argv.I) != null ? ref8 : 'device'
  };

  log = require('./utils/logger').createLogger(config.loglevel, config.logfile);

  log.info("VnetLab application starts..... ");

  log.info("System Configuration " + JSON.stringify(config));

  console.log("System Configuration " + JSON.stringify(config));

  systemcheck = function() {
    return log.info("performing system check");
  };

  log.debug("checking the lxc installation files");

  log.info("system check passed");

  systemcheck();

  log.info("starting the REST api services...");

  topology = require('./Topology');

  topology.configure(config);

  topologyPost = function(req, res, next) {
    log.info("REST API - POST /Topology received, body contents - " + JSON.stringify(req.body));
    return topology.create(req.body, (function(_this) {
      return function(result) {
        log.info("POST /Topology result " + JSON.stringify(result));
        res.send(result);
        return next();
      };
    })(this));
  };

  topologyList = function(req, res, next) {
    log.info("REST API - GET /Topology received ");
    return topology.list((function(_this) {
      return function(result) {
        log.info("REST API - GET /Topology result " + JSON.stringify(result));
        res.send(result);
        return next();
      };
    })(this));
  };

  topologyGet = function(req, res, next) {
    log.info("REST API - GET /Topology/:id received ", req.params.id);
    return topology.get(req.params.id, (function(_this) {
      return function(result) {
        util.log("REST API - GET /Topology/id result " + JSON.stringify(result));
        res.send(result);
        return next();
      };
    })(this));
  };

  topologyDelete = function(req, res, next) {
    log.info("REST API - DELETE /Topology/:id received - ", req.params.id);
    return topology.del(req.params.id, (function(_this) {
      return function(result) {
        log.info("REST API - DELETE /Topology/:id result  " + JSON.stringify(result));
        res.send(result);
        return next();
      };
    })(this));
  };

  server = restify.createServer();

  server.use(restify.acceptParser(server.acceptable));

  server.use(restify.queryParser());

  server.use(restify.jsonp());

  server.use(restify.bodyParser());

  server.post('/Topology', topologyPost);

  server.get('/Topology', topologyList);

  server.get('/Topology/:id', topologyGet);

  server.del('/Topology/:id', topologyDelete);

  server.listen(5050, function() {
    return console.log('VNetLab listening on port : 5050.....');
  });

}).call(this);
